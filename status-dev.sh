#!/bin/bash

# Cores para sa√≠da
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir mensagens de sucesso
success() {
  echo -e "${GREEN}[SUCESSO]${NC} $1"
}

# Fun√ß√£o para exibir mensagens de aviso
warning() {
  echo -e "${YELLOW}[AVISO]${NC} $1"
}

# Fun√ß√£o para exibir mensagens de erro
error() {
  echo -e "${RED}[ERRO]${NC} $1"
}

# Fun√ß√£o para exibir informa√ß√µes
info() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

# Fun√ß√£o para verificar a sa√∫de de um servi√ßo HTTP/HTTPS
check_http_service() {
  local name=$1
  local url=$2
  local method=${3:-GET}
  
  echo -n "Verificando $name ($url)... "
  
  # Usa curl para verificar o status HTTP
  response=$(curl -s -o /dev/null -w "%{http_code}" -X $method $url 2>/dev/null)
  
  if [ "$response" = "" ]; then
    echo -e "${RED}‚ùå Fora do ar${NC}"
    return 1
  elif [ $response -ge 200 ] && [ $response -lt 400 ]; then
    echo -e "${GREEN}‚úÖ Online (HTTP $response)${NC}"
    return 0
  else
    echo -e "${YELLOW}‚ö†Ô∏è  Com problemas (HTTP $response)${NC}"
    return 2
  fi
}

# Fun√ß√£o para verificar um servi√ßo Docker
check_docker_service() {
  local name=$1
  
  echo -n "Verificando $name... "
  
  # Verifica se o container est√° em execu√ß√£o
  container_id=$(docker ps -q -f "name=^${name}$")
  
  if [ -z "$container_id" ]; then
    echo -e "${RED}‚ùå Parado${NC}"
    return 1
  else
    # Verifica o status de sa√∫de do container, se dispon√≠vel
    health_status=$(docker inspect --format='{{.State.Health.Status}}' $name 2>/dev/null || echo "no healthcheck")
    
    if [ "$health_status" = "healthy" ]; then
      echo -e "${GREEN}‚úÖ Em execu√ß√£o (saud√°vel)${NC}"
      return 0
    elif [ "$health_status" = "no healthcheck" ]; then
      echo -e "${GREEN}‚úÖ Em execu√ß√£o${NC}"
      return 0
    elif [ "$health_status" = "starting" ]; then
      echo -e "${YELLOW}üîÑ Iniciando...${NC}"
      return 2
    else
      echo -e "${YELLOW}‚ö†Ô∏è  Em execu√ß√£o (n√£o saud√°vel: $health_status)${NC}"
      return 2
    fi
  fi
}

# Fun√ß√£o para verificar o uso de recursos do sistema
check_system_resources() {
  echo -e "\n${BLUE}üìä Uso de Recursos do Sistema:${NC}"
  
  # Uso de CPU
  cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}' | awk -F. '{print $1}')
  echo -n "CPU: "
  if [ $cpu_usage -gt 90 ]; then
    echo -e "${RED}${cpu_usage}% (Alto)${NC}"
  elif [ $cpu_usage -gt 70 ]; then
    echo -e "${YELLOW}${cpu_usage}% (M√©dio)${NC}"
  else
    echo -e "${GREEN}${cpu_usage}% (Normal)${NC}"
  fi
  
  # Uso de mem√≥ria
  total_mem=$(free -m | awk '/Mem:/ {print $2}')
  used_mem=$(free -m | awk '/Mem:/ {print $3}')
  mem_percent=$((used_mem * 100 / total_mem))
  
  echo -n "Mem√≥ria: "
  if [ $mem_percent -gt 90 ]; then
    echo -e "${RED}${mem_percent}% (${used_mem}MB/${total_mem}MB - Cr√≠tico)${NC}"
  elif [ $mem_percent -gt 70 ]; then
    echo -e "${YELLOW}${mem_percent}% (${used_mem}MB/${total_mem}MB - Alto)${NC}"
  else
    echo -e "${GREEN}${mem_percent}% (${used_mem}MB/${total_mem}MB - Normal)${NC}"
  fi
  
  # Uso de disco
  disk_usage=$(df -h / | awk 'NR==2 {print $5}' | tr -d '%')
  echo -n "Disco (sistema de arquivos raiz): "
  if [ $disk_usage -gt 90 ]; then
    echo -e "${RED}${disk_usage}% (Cr√≠tico)${NC}"
  elif [ $disk_usage -gt 70 ]; then
    echo -e "${YELLOW}${disk_usage}% (Alto)${NC}"
  else
    echo -e "${GREEN}${disk_usage}% (Normal)${NC}"
  fi
}

# Fun√ß√£o principal
main() {
  echo -e "\n${BLUE}üîÑ Verificando o status do Ambiente de Desenvolvimento Hypesoft${NC}\n"
  
  # Verifica se o Docker est√° em execu√ß√£o
  if ! docker info &> /dev/null; then
    error "O Docker n√£o est√° em execu√ß√£o. Por favor, inicie o Docker e tente novamente."
    exit 1
  fi
  
  # Verifica os servi√ßos Docker
  echo -e "${BLUE}üê≥ Status dos Containers Docker:${NC}"
  
  # Lista de servi√ßos para verificar
  services=("mongodb" "postgres" "keycloak" "backend" "frontend" "nginx" "mongo-express")
  
  # Contadores para resumo
  total_services=${#services[@]}
  running_services=0
  warning_services=0
  error_services=0
  
  # Verifica cada servi√ßo
  for service in "${services[@]}"; do
    if check_docker_service "$service"; then
      ((running_services++))
    elif [ $? -eq 2 ]; then
      ((warning_services++))
    else
      ((error_services++))
    fi
  done
  
  # Verifica os servi√ßos HTTP/HTTPS
  echo -e "\n${BLUE}üåê Status dos Servi√ßos Web:${NC}"
  
  # Lista de servi√ßos web para verificar
  declare -A web_services=(
    ["Frontend"]="https://localhost:3000"
    ["Backend API"]="https://api.localhost/health"
    ["Keycloak Admin"]="https://auth.localhost/realms/master"
    ["Mongo Express"]="http://mongo-express.localhost:8081"
  )
  
  # Verifica cada servi√ßo web
  for service in "${!web_services[@]}"; do
    check_http_service "$service" "${web_services[$service]}"
    status_code=$?
    
    if [ $status_code -eq 0 ]; then
      ((running_services++))
    elif [ $status_code -eq 2 ]; then
      ((warning_services++))
    else
      ((error_services++))
    fi
  done
  
  # Exibe o resumo
  echo -e "\n${BLUE}üìä Resumo do Ambiente:${NC}"
  echo -e "${GREEN}‚úÖ $running_services servi√ßos em execu√ß√£o${NC}"
  
  if [ $warning_services -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  $warning_services servi√ßos com avisos${NC}"
  fi
  
  if [ $error_services -gt 0 ]; then
    echo -e "${RED}‚ùå $error_services servi√ßos com erros${NC}"
  fi
  
  # Verifica recursos do sistema
  check_system_resources
  
  # Dicas de solu√ß√£o de problemas
  if [ $error_services -gt 0 ] || [ $warning_services -gt 0 ]; then
    echo -e "\n${YELLOW}üîß Dicas para Solu√ß√£o de Problemas:${NC}"
    
    if [ $error_services -gt 0 ]; then
      echo "- Verifique os logs dos servi√ßos com problemas: docker logs <nome_do_container>"
      echo "- Verifique se todos os servi√ßos est√£o em execu√ß√£o: docker ps -a"
    fi
    
    if [ $warning_services -gt 0 ]; then
      echo "- Alguns servi√ßos podem estar iniciando. Aguarde alguns instantes e execute este script novamente."
    fi
    
    echo "- Para reiniciar o ambiente: ./start-dev.sh"
    echo "- Para parar o ambiente: ./stop-dev.sh"
  fi
  
  echo -e "\n${GREEN}‚úÖ Verifica√ß√£o conclu√≠da em $(date)${NC}"
}

# Executa a fun√ß√£o principal
main "@"
